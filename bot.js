require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { Pool } = require("pg");

const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

async function query(sql, params) {
  const client = await pool.connect();
  try {
    const res = await client.query(sql, params);
    return res;
  } finally {
    client.release();
  }
}

const adminAddMovieState = new Map();

async function isAdmin(telegram_id) {
  const res = await query(
    "SELECT role FROM users_filmsBot WHERE telegram_id=$1",
    [telegram_id],
  );
  return res.rowCount && res.rows[0].role === "admin";
}

// –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.start(async (ctx) => {
  const telegram_id = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name || "User";

  await query(
    `
    INSERT INTO users_filmsBot (telegram_id, username, role)
    VALUES ($1, $2, 'member')
    ON CONFLICT (telegram_id) DO NOTHING
  `,
    [telegram_id, username],
  );

  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∏–Ω–æ-–±–æ—Ç.`);
});

bot.telegram.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
  { command: "vote", description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –Ω–∞ —ç—Ç–æ—Ç –≤–µ—á–µ—Ä" },
]);

bot.telegram.setMyCommands(
  [
    { command: "vote", description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –Ω–∞ —ç—Ç–æ—Ç –≤–µ—á–µ—Ä" },
    { command: "calculate", description: "–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è" },
    { command: "addpack", description: "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—á–∫—É" },
    { command: "delpack", description: "–£–¥–∞–ª–∏—Ç—å –ø–∞—á–∫—É" },
    { command: "addmovie", description: "–¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ –ø–∞—á–∫—É" },
    { command: "movie_delete", description: "–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –∏–∑ –ø–∞—á–∫–∏" },
    { command: "notify", description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" },
    { command: "listpacks", description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" },
  ],
  {
    scope: { type: "chat", chat_id: 930852883 },
  },
);

bot.command("PING", async (ctx) =>{
  return ctx.reply("PONG")
})

bot.command("addpack", async (ctx) => {
  console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", ctx.from.username);
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–∞—á–∫–∏ —Ñ–∏–ª—å–º–æ–≤.");

  const args = ctx.message.text.split(" ").slice(1);
  const packName = args.join(" ").trim();

  if (!packName)
    return ctx.reply(
      "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—á–∫–∏ —Ñ–∏–ª—å–º–æ–≤.\n–ü—Ä–∏–º–µ—Ä: /addpack –ö–æ–º–µ–¥–∏–∏ –º–∞—Ä—Ç–∞",
    );

  try {
    await query(`INSERT INTO movie_packs (name) VALUES ($1)`, [packName]);
    ctx.reply(`‚úÖ –ü–∞—á–∫–∞ —Ñ–∏–ª—å–º–æ–≤ "${packName}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—á–∫–∏.");
  }
});

bot.command("calculate", async (ctx) => {
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");

  try {
    const packsRes = await query(
      `SELECT id, name FROM movie_packs ORDER BY id DESC LIMIT 10`
    );

    if (!packsRes.rowCount)
      return ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—á–µ–∫.");

    const buttons = packsRes.rows.map((pack) => [
      Markup.button.callback(pack.name, `calculate_pack_${pack.id}`)
    ]);

    await ctx.reply(
      "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—á–∫—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
      Markup.inlineKeyboard(buttons)
    );
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—á–µ–∫.");
  }
});

bot.action(/^calculate_pack_(\d+)$/, async (ctx) => {
  ctx.answerCbQuery(); // —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
  const packId = ctx.match[1];

  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");

  try {
    const votesRes = await query(
      `
      SELECT u.telegram_id, u.username, m.title, v.score
      FROM votes v
      JOIN users_filmsBot u ON v.user_id = u.id
      JOIN movies m ON v.movie_id = m.id
      WHERE v.pack_id = $1
    `,
      [packId],
    );

    if (!votesRes.rowCount)
      return ctx.reply("‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –ø–∞—á–∫–∏.");

    const votes = {};
    votesRes.rows.forEach((row) => {
      const voter = row.username || row.telegram_id.toString();
      if (!votes[voter]) votes[voter] = {};
      votes[voter][row.title] = row.score;
    });

    const totals = {};
    const contributions = {};

    for (const [voter, ratings] of Object.entries(votes)) {
      const numVotes = Object.keys(ratings).length;
      const divisor = Math.log2(numVotes + 1);
      contributions[voter] = {};

      for (const [movie, score] of Object.entries(ratings)) {
        const weighted = score / divisor;
        if (!totals[movie]) totals[movie] = 0;
        totals[movie] += weighted;
        contributions[voter][movie] = weighted;
      }
    }

    const sortedTotals = Object.entries(totals).sort((a, b) => b[1] - a[1]);

    let resultMessage = "üèÜ –ò—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n";
    sortedTotals.forEach(([movie, score]) => {
      resultMessage += `${movie}: ${score.toFixed(2)} –±–∞–ª–ª–æ–≤\n`;
    });

    let contributionMessage = "\nüìä –í–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ:\n";
    for (const [voter, movieScores] of Object.entries(contributions)) {
      contributionMessage += `\nüë§ ${voter}:\n`;
      for (const [movie, val] of Object.entries(movieScores)) {
        contributionMessage += `  ‚Üí ${movie}: ${val.toFixed(2)} –±–∞–ª–ª–æ–≤\n`;
      }
    }

    const telegramIds = [...new Set(votesRes.rows.map((r) => r.telegram_id))];
    for (const id of telegramIds) {
      await ctx.telegram.sendMessage(id, resultMessage);
      await ctx.telegram.sendMessage(id, contributionMessage);
    }

    ctx.reply("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.");
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
  }
});


bot.command("movie_delete", async (ctx) => {
  console.log("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∑–∞–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", ctx.from.username);
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");

  try {
    const res = await query("SELECT id, name FROM movie_packs ORDER BY id DESC");

    if (res.rowCount === 0)
      return ctx.reply("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—á–∫–∏ —Ñ–∏–ª—å–º–æ–≤.");

    const buttons = res.rows.map((pack) => [
      Markup.button.callback(pack.name, `deletepack_${pack.id}`)
    ]);

    ctx.reply("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—á–∫—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º:", Markup.inlineKeyboard(buttons));
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—á–µ–∫.");
  }
});

bot.action(/deletepack_(\d+)/, async (ctx) => {
  const packId = ctx.match[1];

  try {
    const res = await query(
      "SELECT id, title FROM movies WHERE pack_id = $1 ORDER BY id",
      [packId]
    );

    if (res.rowCount === 0)
      return ctx.editMessageText("‚ùå –í —ç—Ç–æ–π –ø–∞—á–∫–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.");

    const buttons = res.rows.map((movie) => [
      Markup.button.callback(movie.title, `deletemovie_${movie.id}`)
    ]);

    ctx.editMessageText("üéû –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard(buttons));
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å–º–æ–≤.");
  }
});

bot.action(/deletemovie_(\d+)/, async (ctx) => {
  const movieId = ctx.match[1];

  try {
    const movieRes = await query(
      "SELECT title FROM movies WHERE id = $1",
      [movieId]
    );

    if (!movieRes.rowCount)
      return ctx.answerCbQuery("‚ùå –§–∏–ª—å–º —É–∂–µ —É–¥–∞–ª—ë–Ω.");

    const title = movieRes.rows[0].title;

    await query("DELETE FROM votes WHERE movie_id = $1", [movieId]);
    await query("DELETE FROM movies WHERE id = $1", [movieId]);

    await ctx.editMessageText(`‚úÖ –§–∏–ª—å–º "${title}" –∏ –µ–≥–æ –≥–æ–ª–æ—Å–∞ —É–¥–∞–ª–µ–Ω—ã.`);
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞.");
  }
});


bot.command("notify", async (ctx) => {
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");

  try {
    const res = await query("SELECT telegram_id FROM users_filmsBot");

    if (!res.rowCount)
      return ctx.reply("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");

    const message = "üé¨ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞–∫ —Ñ–∏–ª—å–º–æ–≤, –ø—Ä–æ–≥–æ–ª–æ—Å—É–π, –ø–∂";

    for (const row of res.rows) {
      try {
        await ctx.telegram.sendMessage(row.telegram_id, message);
      } catch (e) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${row.telegram_id}`);
      }
    }

    ctx.reply("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.");
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
  }
});

bot.command("delpack", async (ctx) => {
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");

  try {
    const res = await query("SELECT id, name FROM movie_packs ORDER BY id");

    if (res.rowCount === 0)
      return ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");

    const buttons = res.rows.map((pack) => [
      Markup.button.callback(pack.name, `delpack_${pack.id}`)
    ]);

    ctx.reply("üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard(buttons));
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–∫–æ–≤.");
  }
});

bot.action(/delpack_(\d+)/, async (ctx) => {
  if (!(await isAdmin(ctx.from.id)))
    return ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");

  const packId = ctx.match[1];

  try {
    // –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º—ã –∏–∑ —ç—Ç–æ–≥–æ –ø–∞–∫–∞
    await query("DELETE FROM movies WHERE pack_id = $1", [packId]);

    // –£–¥–∞–ª—è–µ–º —Å–∞–º –ø–∞–∫
    await query("DELETE FROM movie_packs WHERE id = $1", [packId]);

    await ctx.editMessageText("‚úÖ –ü–∞–∫ –∏ –µ–≥–æ —Ñ–∏–ª—å–º—ã —É–¥–∞–ª–µ–Ω—ã.");
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–∫–∞.");
  }
});



bot.command("addmovie", async (ctx) => {
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å–º—ã.");

  try {
    const packsRes = await query(
      `SELECT id, name FROM movie_packs ORDER BY id DESC LIMIT 10`
    );

    if (!packsRes.rowCount)
      return ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—á–µ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞.");

    const buttons = packsRes.rows.map((pack) => [
      Markup.button.callback(pack.name, `addmovie_pack_${pack.id}`),
    ]);

    await ctx.reply(
      "üéû –í—ã–±–µ—Ä–∏ –ø–∞—á–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º:",
      Markup.inlineKeyboard(buttons)
    );
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—á–µ–∫.");
  }
});

bot.action(/^addmovie_pack_(\d+)$/, async (ctx) => {
  ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
  const packId = ctx.match[1];
  const telegramId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞–¥–º–∏–Ω
  if (!(await isAdmin(telegramId)))
    return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å–º—ã.");

  const packRes = await query(
    `SELECT name FROM movie_packs WHERE id = $1`,
    [packId]
  );

  if (!packRes.rowCount)
    return ctx.reply("‚ùå –ü–∞—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

  const packName = packRes.rows[0].name;

  adminAddMovieState.set(telegramId, { packId, packName });

  ctx.reply(
    `‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞—á–∫—É "${packName}":`
  );
});


bot.command("listpacks", async (ctx) => {
  console.log("–ü–æ–∫–∞–∑ –ø–∞–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", ctx.from.username);
  if (!(await isAdmin(ctx.from.id)))
    return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–∞—á–∫–∏.");

  try {
    const res = await query(`SELECT id, name FROM movie_packs ORDER BY id`);
    if (!res.rowCount) return ctx.reply("–ü–∞—á–µ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");

    let msg = "üì¶ –ü–∞—á–∫–∏ —Ñ–∏–ª—å–º–æ–≤:\n";
    for (const row of res.rows) {
      msg += `#${row.id}: ${row.name}\n`;
    }
    ctx.reply(msg);
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—á–µ–∫.");
  }
});

bot.command("vote", async (ctx) => {
  const userId = ctx.from.id;
  console.log("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", ctx.from.username);
  try {
    const packRes = await query(
      "SELECT id, name FROM movie_packs ORDER BY id DESC LIMIT 1",
    );
    if (!packRes.rowCount)
      return ctx.reply("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø–∞—á–∫–∏.");

    const pack = packRes.rows[0];

    const moviesRes = await query(
      "SELECT id, title FROM movies WHERE pack_id = $1 ORDER BY id",
      [pack.id],
    );
    if (!moviesRes.rowCount)
      return ctx.reply("–í –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—á–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.");

    let msg = `üé¨ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ñ–∏–ª—å–º—ã –≤ –ø–∞—á–∫–µ "${pack.name}":\n\n–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å–º, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏ –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 10):`;

    const buttons = moviesRes.rows.map((movie) => [
      Markup.button.callback(movie.title, `vote_film_${movie.id}`),
    ]);

    await ctx.reply(msg, Markup.inlineKeyboard(buttons));
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.");
  }
});

const userVoteState = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

bot.action(/^vote_film_(\d+)$/, async (ctx) => {
  ctx.answerCbQuery(); // —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
  const movieId = ctx.match[1];
  const userId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∏–ª—å–º
  const movieRes = await query(
    "SELECT title, pack_id FROM movies WHERE id = $1",
    [movieId],
  );
  if (!movieRes.rowCount) return ctx.reply("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");

  const { title, pack_id } = movieRes.rows[0];

  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç —Ñ–∏–ª—å–º
  userVoteState.set(userId, { movieId, movieTitle: title, packId: pack_id });

  ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É —Ñ–∏–ª—å–º—É "${title}" –æ—Ç 0 –¥–æ 10:`);
});

bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  const voteData = userVoteState.get(userId);

   // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ (–∞–¥–º–∏–Ω) ===
  const adminState = adminAddMovieState.get(userId);
  if (adminState) {
    const movieTitle = ctx.message.text.trim();
    if (!movieTitle)
      return ctx.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.");

    try {
      await query(
        "INSERT INTO movies (pack_id, title) VALUES ($1, $2)",
        [adminState.packId, movieTitle]
      );
      ctx.reply(
        `‚úÖ –§–∏–ª—å–º "${movieTitle}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞—á–∫—É "${adminState.packName}".`
      );
    } catch (e) {
      console.error(e);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞.");
    } finally {
      adminAddMovieState.delete(userId);
    }
    return;
  }

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ===
  if (!voteData) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–∏—Ä–∞–ª —Ñ–∏–ª—å–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É

  const score = Number(ctx.message.text);
  if (isNaN(score) || score < 1 || score > 10) {
    return ctx.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10.");
  }

  try {
    const userRes = await query(
      "SELECT id FROM users_filmsBot WHERE telegram_id = $1",
      [userId],
    );
    if (!userRes.rowCount)
      return ctx.reply(
        "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
      );
    const userDbId = userRes.rows[0].id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏
    const duplicateRes = await query(
      "SELECT id FROM votes WHERE user_id = $1 AND pack_id = $2 AND score = $3",
      [userDbId, voteData.packId, score],
    );
    if (duplicateRes.rowCount) {
      return ctx.reply(`‚ùå –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –æ—Ü–µ–Ω–∫—É ${score} –≤ —ç—Ç–æ–π –ø–∞—á–∫–µ.`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ–ª–æ—Å
    const voteRes = await query(
      "SELECT id FROM votes WHERE user_id = $1 AND movie_id = $2 AND pack_id = $3",
      [userDbId, voteData.movieId, voteData.packId],
    );

    if (voteRes.rowCount) {
      await query("UPDATE votes SET score = $1 WHERE id = $2", [
        score,
        voteRes.rows[0].id,
      ]);
      ctx.reply(
        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞ "${voteData.movieTitle}" –Ω–∞ ${score}.`,
      );
    } else {
      await query(
        "INSERT INTO votes (user_id, movie_id, pack_id, score) VALUES ($1, $2, $3, $4)",
        [userDbId, voteData.movieId, voteData.packId, score],
      );
      ctx.reply(
        `‚úÖ –û—Ü–µ–Ω–∫–∞ ${score} –¥–ª—è —Ñ–∏–ª—å–º–∞ "${voteData.movieTitle}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`,
      );
    }

    userVoteState.delete(userId); // –æ—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.");
  }
});

bot.command("vote_set", async (ctx) => {
  console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", ctx.from.username);
  const userId = ctx.from.id;
  const text = ctx.message.text;
  const args = text.split(" ").slice(1);

  if (args.length < 2)
    return ctx.reply(
      "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /vote_set <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∏–ª—å–º–∞> <–æ—Ü–µ–Ω–∫–∞_–æ—Ç_0_–¥–æ_10>",
    );

  // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –æ—Ü–µ–Ω–∫–∞, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
  const scoreRaw = args[args.length - 1];
  const score = Number(scoreRaw);
  const movieName = args.slice(0, -1).join(" ");

  if (isNaN(score) || score < 0 || score > 10)
    return ctx.reply("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10.");

  try {
    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users_filmsBot
    const userRes = await query(
      "SELECT id FROM users_filmsBot WHERE telegram_id = $1",
      [userId],
    );
    if (!userRes.rowCount)
      return ctx.reply(
        "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
      );

    const userDbId = userRes.rows[0].id;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—á–∫—É
    const packRes = await query(
      "SELECT id FROM movie_packs ORDER BY id DESC LIMIT 1",
    );
    if (!packRes.rowCount)
      return ctx.reply("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø–∞—á–∫–∏.");

    const packId = packRes.rows[0].id;

    // –ò—â–µ–º —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —ç—Ç–æ–π –ø–∞—á–∫–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    const movieRes = await query(
      `SELECT id, title FROM movies WHERE pack_id = $1 AND LOWER(title) = LOWER($2)`,
      [packId, movieName],
    );

    if (!movieRes.rowCount) {
      return ctx.reply(`‚ùå –§–∏–ª—å–º "${movieName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—á–∫–µ.`);
    }

    const movieId = movieRes.rows[0].id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –æ—Ü–µ–Ω–∫—É –≤ —ç—Ç–æ–π –ø–∞—á–∫–µ
    const voteCheck = await query(
      "SELECT id FROM votes WHERE user_id = $1 AND pack_id = $2 AND score = $3",
      [userDbId, packId, score],
    );

    if (voteCheck.rowCount)
      return ctx.reply(`‚ùå –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –æ—Ü–µ–Ω–∫—É ${score} –≤ —ç—Ç–æ–π –ø–∞—á–∫–µ.`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å –∑–∞ —Ñ–∏–ª—å–º
    const existingVote = await query(
      "SELECT id FROM votes WHERE user_id = $1 AND pack_id = $2 AND movie_id = $3",
      [userDbId, packId, movieId],
    );

    if (existingVote.rowCount) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å
      await query("UPDATE votes SET score = $1 WHERE id = $2", [
        score,
        existingVote.rows[0].id,
      ]);
      ctx.reply(
        `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–≤–æ–π –≥–æ–ª–æ—Å –∑–∞ —Ñ–∏–ª—å–º "${movieRes.rows[0].title}" –Ω–∞ –æ—Ü–µ–Ω–∫—É ${score}.`,
      );
    } else {
      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
      await query(
        "INSERT INTO votes (user_id, movie_id, pack_id, score) VALUES ($1, $2, $3, $4)",
        [userDbId, movieId, packId, score],
      );
      ctx.reply(
        `‚úÖ –¢–≤–æ–π –≥–æ–ª–æ—Å –∑–∞ —Ñ–∏–ª—å–º "${movieRes.rows[0].title}" —Å –æ—Ü–µ–Ω–∫–æ–π ${score} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`,
      );
    }
  } catch (e) {
    console.error(e);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞.");
  }
});

// bot.on("text", async (ctx) => {
//   const telegramId = ctx.from.id;
//   const state = adminAddMovieState.get(telegramId);

//   if (!state) return; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º —Ñ–∏–ª—å–º–∞ –æ—Ç –∞–¥–º–∏–Ω–∞

//   const movieTitle = ctx.message.text.trim();
//   if (!movieTitle)
//     return ctx.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.");

//   try {
//     await query(
//       `INSERT INTO movies (pack_id, title) VALUES ($1, $2)`,
//       [state.packId, movieTitle]
//     );

//     ctx.reply(
//       `‚úÖ –§–∏–ª—å–º "${movieTitle}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞—á–∫—É "${state.packName}".`
//     );
//   } catch (e) {
//     console.error(e);
//     ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞.");
//   } finally {
//     adminAddMovieState.delete(telegramId); // –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
//   }
// });


bot.launch();
console.log("Bot started");
